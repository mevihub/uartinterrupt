
Uart Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003024  08003024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003080  08003080  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003080  08003080  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003080  08003080  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08003094  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003094  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d57  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017af  00000000  00000000  00028d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  0002a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002ac98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf51  00000000  00000000  0002b350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007526  00000000  00000000  000482a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad492  00000000  00000000  0004f7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fcc59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c7c  00000000  00000000  000fccd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800300c 	.word	0x0800300c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800300c 	.word	0x0800300c

080001c8 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  HAL_Init();
 80001cc:	f000 f9f8 	bl	80005c0 <HAL_Init>
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  MX_GPIO_Init();
 80001d4:	f000 f8a8 	bl	8000328 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80001d8:	f000 f870 	bl	80002bc <MX_USART3_UART_Init>

  HAL_UART_Transmit(&huart3,(uint8_t *) "UART3 Interrupt\r\n", sizeof("UART3 Interrupt\r\n"), 1000);
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	2212      	movs	r2, #18
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0x34>)
 80001e4:	4806      	ldr	r0, [pc, #24]	; (8000200 <main+0x38>)
 80001e6:	f002 f88f 	bl	8002308 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3,(uint8_t *) "Enter Text:\r\n", sizeof("Enter Text:\r\n"), 1000);
 80001ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ee:	220e      	movs	r2, #14
 80001f0:	4904      	ldr	r1, [pc, #16]	; (8000204 <main+0x3c>)
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <main+0x38>)
 80001f4:	f002 f888 	bl	8002308 <HAL_UART_Transmit>
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x30>
 80001fa:	bf00      	nop
 80001fc:	08003024 	.word	0x08003024
 8000200:	20000028 	.word	0x20000028
 8000204:	08003038 	.word	0x08003038

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09e      	sub	sp, #120	; 0x78
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fef0 	bl	8002ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	223c      	movs	r2, #60	; 0x3c
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fee2 	bl	8002ffc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000258:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fd16 	bl	8000c90 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 f899 	bl	80003a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fc08 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000296:	f000 f883 	bl	80003a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800029a:	2304      	movs	r3, #4
 800029c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fe31 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002b0:	f000 f876 	bl	80003a0 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3778      	adds	r7, #120	; 0x78
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <MX_USART3_UART_Init+0x68>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART3_UART_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002fe:	4808      	ldr	r0, [pc, #32]	; (8000320 <MX_USART3_UART_Init+0x64>)
 8000300:	f001 ffb4 	bl	800226c <HAL_UART_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800030a:	f000 f849 	bl	80003a0 <Error_Handler>
  }
  USART3->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <MX_USART3_UART_Init+0x68>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a04      	ldr	r2, [pc, #16]	; (8000324 <MX_USART3_UART_Init+0x68>)
 8000314:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000318:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	40004800 	.word	0x40004800

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_GPIO_Init+0x74>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <MX_GPIO_Init+0x74>)
 8000334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_GPIO_Init+0x74>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_GPIO_Init+0x74>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a14      	ldr	r2, [pc, #80]	; (800039c <MX_GPIO_Init+0x74>)
 800034c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_GPIO_Init+0x74>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_GPIO_Init+0x74>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <MX_GPIO_Init+0x74>)
 8000364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_GPIO_Init+0x74>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_GPIO_Init+0x74>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <MX_GPIO_Init+0x74>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_GPIO_Init+0x74>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]

}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x44>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <HAL_MspInit+0x44>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x44>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_MspInit+0x44>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <HAL_MspInit+0x44>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_MspInit+0x44>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <HAL_UART_MspInit+0x8c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d130      	bne.n	800047c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <HAL_UART_MspInit+0x90>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800044a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800044e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000450:	2302      	movs	r3, #2
 8000452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000458:	2303      	movs	r3, #3
 800045a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800045c:	2307      	movs	r3, #7
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	4619      	mov	r1, r3
 8000466:	4809      	ldr	r0, [pc, #36]	; (800048c <HAL_UART_MspInit+0x94>)
 8000468:	f000 fa98 	bl	800099c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	2100      	movs	r1, #0
 8000470:	2027      	movs	r0, #39	; 0x27
 8000472:	f000 f9e6 	bl	8000842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000476:	2027      	movs	r0, #39	; 0x27
 8000478:	f000 f9ff 	bl	800087a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800047c:	bf00      	nop
 800047e:	3728      	adds	r7, #40	; 0x28
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40004800 	.word	0x40004800
 8000488:	40021000 	.word	0x40021000
 800048c:	48000400 	.word	0x48000400

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0x4>

080004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <MemManage_Handler+0x4>

080004aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e4:	f000 f8b2 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	char ch;
  /* USER CODE END USART3_IRQn 0 */
	uint32_t isrflags   = READ_REG(huart3.Instance->ISR);
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <USART3_IRQHandler+0x58>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	60fb      	str	r3, [r7, #12]
	uint32_t cr1its     = READ_REG(huart3.Instance->CR1);
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <USART3_IRQHandler+0x58>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60bb      	str	r3, [r7, #8]
	if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)){
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	f003 0320 	and.w	r3, r3, #32
 8000508:	2b00      	cmp	r3, #0
 800050a:	d014      	beq.n	8000536 <USART3_IRQHandler+0x4a>
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	f003 0320 	and.w	r3, r3, #32
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00f      	beq.n	8000536 <USART3_IRQHandler+0x4a>
		huart3.Instance->ISR;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <USART3_IRQHandler+0x58>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	69db      	ldr	r3, [r3, #28]
		ch = huart3.Instance->RDR;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <USART3_IRQHandler+0x58>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 8000528:	1df9      	adds	r1, r7, #7
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2201      	movs	r2, #1
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <USART3_IRQHandler+0x58>)
 8000532:	f001 fee9 	bl	8002308 <HAL_UART_Transmit>
	}
  HAL_UART_IRQHandler(&huart3);
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <USART3_IRQHandler+0x58>)
 8000538:	f001 ff7a 	bl	8002430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000028 	.word	0x20000028

08000548 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <SystemInit+0x20>)
 800054e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <SystemInit+0x20>)
 8000554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490e      	ldr	r1, [pc, #56]	; (80005ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0b      	ldr	r4, [pc, #44]	; (80005b8 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000596:	f7ff ffd7 	bl	8000548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059a:	f002 fd0b 	bl	8002fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f7ff fe13 	bl	80001c8 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b0:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 80005b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b8:	200000b0 	.word	0x200000b0

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_Init+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_Init+0x28>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f92b 	bl	800082c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f808 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005dc:	f7ff fee8 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40022000 	.word	0x40022000

080005ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x54>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f1 	udiv	r3, r3, r1
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f943 	bl	8000896 <HAL_SYSTICK_Config>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e00e      	b.n	8000638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d80a      	bhi.n	8000636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f90b 	bl	8000842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_InitTick+0x5c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	e000      	b.n	8000638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	20000008 	.word	0x20000008
 8000648:	20000004 	.word	0x20000004

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_IncTick+0x20>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x24>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_IncTick+0x24>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000008 	.word	0x20000008
 8000670:	200000ac 	.word	0x200000ac

08000674 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;  
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_GetTick+0x14>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	200000ac 	.word	0x200000ac

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <__NVIC_EnableIRQ+0x38>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f8:	d301      	bcc.n	80007fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00f      	b.n	800081e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <SysTick_Config+0x40>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000806:	210f      	movs	r1, #15
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f7ff ff8e 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SysTick_Config+0x40>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <SysTick_Config+0x40>)
 8000818:	2207      	movs	r2, #7
 800081a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010

0800082c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ff29 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000854:	f7ff ff3e 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff8e 	bl	8000780 <NVIC_EncodePriority>
 8000864:	4602      	mov	r2, r0
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff5d 	bl	800072c <__NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff31 	bl	80006f0 <__NVIC_EnableIRQ>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ffa2 	bl	80007e8 <SysTick_Config>
 80008a4:	4603      	mov	r3, r0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d008      	beq.n	80008d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2204      	movs	r2, #4
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e020      	b.n	8000914 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f022 020e 	bic.w	r2, r2, #14
 80008e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f022 0201 	bic.w	r2, r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fa:	2101      	movs	r1, #1
 80008fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000900:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000932:	2b02      	cmp	r3, #2
 8000934:	d005      	beq.n	8000942 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2204      	movs	r2, #4
 800093a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e027      	b.n	8000992 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 020e 	bic.w	r2, r2, #14
 8000950:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 0201 	bic.w	r2, r2, #1
 8000960:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800096a:	2101      	movs	r1, #1
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000986:	2b00      	cmp	r3, #0
 8000988:	d003      	beq.n	8000992 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	4798      	blx	r3
    } 
  }
  return status;
 8000992:	7bfb      	ldrb	r3, [r7, #15]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e154      	b.n	8000c56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 8146 	beq.w	8000c50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d00b      	beq.n	80009e4 <HAL_GPIO_Init+0x48>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d007      	beq.n	80009e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d8:	2b11      	cmp	r3, #17
 80009da:	d003      	beq.n	80009e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b12      	cmp	r3, #18
 80009e2:	d130      	bne.n	8000a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2203      	movs	r2, #3
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	f003 0201 	and.w	r2, r3, #1
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0xea>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b12      	cmp	r3, #18
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0203 	and.w	r2, r3, #3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 80a0 	beq.w	8000c50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <HAL_GPIO_Init+0x2d8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a57      	ldr	r2, [pc, #348]	; (8000c74 <HAL_GPIO_Init+0x2d8>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <HAL_GPIO_Init+0x2d8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b28:	4a53      	ldr	r2, [pc, #332]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b52:	d019      	beq.n	8000b88 <HAL_GPIO_Init+0x1ec>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a49      	ldr	r2, [pc, #292]	; (8000c7c <HAL_GPIO_Init+0x2e0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d013      	beq.n	8000b84 <HAL_GPIO_Init+0x1e8>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <HAL_GPIO_Init+0x2e4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00d      	beq.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <HAL_GPIO_Init+0x2e8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x1e0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <HAL_GPIO_Init+0x2ec>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_GPIO_Init+0x1dc>
 8000b74:	2304      	movs	r3, #4
 8000b76:	e008      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b78:	2305      	movs	r3, #5
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e004      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4093      	lsls	r3, r2
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b9a:	4937      	ldr	r1, [pc, #220]	; (8000c78 <HAL_GPIO_Init+0x2dc>)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba8:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bcc:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf6:	4a25      	ldr	r2, [pc, #148]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c20:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f47f aea3 	bne.w	80009ac <HAL_GPIO_Init+0x10>
  }
}
 8000c66:	bf00      	nop
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	48000800 	.word	0x48000800
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	48001000 	.word	0x48001000
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	f000 bef4 	b.w	8001a92 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 816a 	beq.w	8000f8e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cba:	4bb3      	ldr	r3, [pc, #716]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	d00c      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc6:	4bb0      	ldr	r3, [pc, #704]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d159      	bne.n	8000d86 <HAL_RCC_OscConfig+0xf6>
 8000cd2:	4bad      	ldr	r3, [pc, #692]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cde:	d152      	bne.n	8000d86 <HAL_RCC_OscConfig+0xf6>
 8000ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cf4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d102      	bne.n	8000d12 <HAL_RCC_OscConfig+0x82>
 8000d0c:	4b9e      	ldr	r3, [pc, #632]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	e015      	b.n	8000d3e <HAL_RCC_OscConfig+0xae>
 8000d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d2e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d3a:	4b93      	ldr	r3, [pc, #588]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d42:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d46:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d4a:	fa92 f2a2 	rbit	r2, r2
 8000d4e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d52:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	f042 0220 	orr.w	r2, r2, #32
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	f002 021f 	and.w	r2, r2, #31
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 810c 	beq.w	8000f8c <HAL_RCC_OscConfig+0x2fc>
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 8106 	bne.w	8000f8c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f000 be86 	b.w	8001a92 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d90:	d106      	bne.n	8000da0 <HAL_RCC_OscConfig+0x110>
 8000d92:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7c      	ldr	r2, [pc, #496]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e030      	b.n	8000e02 <HAL_RCC_OscConfig+0x172>
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x134>
 8000daa:	4b77      	ldr	r3, [pc, #476]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a76      	ldr	r2, [pc, #472]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b74      	ldr	r3, [pc, #464]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a73      	ldr	r2, [pc, #460]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e01e      	b.n	8000e02 <HAL_RCC_OscConfig+0x172>
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dce:	d10c      	bne.n	8000dea <HAL_RCC_OscConfig+0x15a>
 8000dd0:	4b6d      	ldr	r3, [pc, #436]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a6c      	ldr	r2, [pc, #432]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b6a      	ldr	r3, [pc, #424]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a69      	ldr	r2, [pc, #420]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	e00b      	b.n	8000e02 <HAL_RCC_OscConfig+0x172>
 8000dea:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a66      	ldr	r2, [pc, #408]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b64      	ldr	r3, [pc, #400]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a63      	ldr	r2, [pc, #396]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e02:	4b61      	ldr	r3, [pc, #388]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f023 020f 	bic.w	r2, r3, #15
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	495d      	ldr	r1, [pc, #372]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d059      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc28 	bl	8000674 <HAL_GetTick>
 8000e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fc23 	bl	8000674 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	; 0x64
 8000e38:	d902      	bls.n	8000e40 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f000 be29 	b.w	8001a92 <HAL_RCC_OscConfig+0xe02>
 8000e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e44:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e54:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d102      	bne.n	8000e72 <HAL_RCC_OscConfig+0x1e2>
 8000e6c:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	e015      	b.n	8000e9e <HAL_RCC_OscConfig+0x20e>
 8000e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e8e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ea6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000eaa:	fa92 f2a2 	rbit	r2, r2
 8000eae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eb2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000eb6:	fab2 f282 	clz	r2, r2
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	f042 0220 	orr.w	r2, r2, #32
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f002 021f 	and.w	r2, r2, #31
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0ab      	beq.n	8000e2a <HAL_RCC_OscConfig+0x19a>
 8000ed2:	e05c      	b.n	8000f8e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fbce 	bl	8000674 <HAL_GetTick>
 8000ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ede:	f7ff fbc9 	bl	8000674 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	; 0x64
 8000eec:	d902      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f000 bdcf 	b.w	8001a92 <HAL_RCC_OscConfig+0xe02>
 8000ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f00:	fa93 f3a3 	rbit	r3, r3
 8000f04:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x296>
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x2c2>
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f42:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_RCC_OscConfig+0x2f8>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f56:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f5a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f5e:	fa92 f2a2 	rbit	r2, r2
 8000f62:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f66:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f6a:	fab2 f282 	clz	r2, r2
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	f042 0220 	orr.w	r2, r2, #32
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	f002 021f 	and.w	r2, r2, #31
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1ab      	bne.n	8000ede <HAL_RCC_OscConfig+0x24e>
 8000f86:	e002      	b.n	8000f8e <HAL_RCC_OscConfig+0x2fe>
 8000f88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 816f 	beq.w	800127c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f9e:	4bd0      	ldr	r3, [pc, #832]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000faa:	4bcd      	ldr	r3, [pc, #820]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d16c      	bne.n	8001090 <HAL_RCC_OscConfig+0x400>
 8000fb6:	4bca      	ldr	r3, [pc, #808]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d166      	bne.n	8001090 <HAL_RCC_OscConfig+0x400>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fd4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d102      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x362>
 8000fec:	4bbc      	ldr	r3, [pc, #752]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	e013      	b.n	800101a <HAL_RCC_OscConfig+0x38a>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800100a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001016:	4bb2      	ldr	r3, [pc, #712]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	2202      	movs	r2, #2
 800101c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001020:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800102c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001030:	fab2 f282 	clz	r2, r2
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	f042 0220 	orr.w	r2, r2, #32
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	f002 021f 	and.w	r2, r2, #31
 8001040:	2101      	movs	r1, #1
 8001042:	fa01 f202 	lsl.w	r2, r1, r2
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <HAL_RCC_OscConfig+0x3cc>
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f000 bd1b 	b.w	8001a92 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4ba0      	ldr	r3, [pc, #640]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	21f8      	movs	r1, #248	; 0xf8
 800106c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001074:	fa91 f1a1 	rbit	r1, r1
 8001078:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800107c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001080:	fab1 f181 	clz	r1, r1
 8001084:	b2c9      	uxtb	r1, r1
 8001086:	408b      	lsls	r3, r1
 8001088:	4995      	ldr	r1, [pc, #596]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e0f5      	b.n	800127c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8085 	beq.w	80011a6 <HAL_RCC_OscConfig+0x516>
 800109c:	2301      	movs	r3, #1
 800109e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	461a      	mov	r2, r3
 80010c4:	2301      	movs	r3, #1
 80010c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fad4 	bl	8000674 <HAL_GetTick>
 80010cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	e00a      	b.n	80010e8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff facf 	bl	8000674 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d902      	bls.n	80010e8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	f000 bcd5 	b.w	8001a92 <HAL_RCC_OscConfig+0xe02>
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	095b      	lsrs	r3, r3, #5
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <HAL_RCC_OscConfig+0x488>
 8001112:	4b73      	ldr	r3, [pc, #460]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	e013      	b.n	8001140 <HAL_RCC_OscConfig+0x4b0>
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001130:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800113c:	4b68      	ldr	r3, [pc, #416]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2202      	movs	r2, #2
 8001142:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001146:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800114a:	fa92 f2a2 	rbit	r2, r2
 800114e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001152:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001156:	fab2 f282 	clz	r2, r2
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	f042 0220 	orr.w	r2, r2, #32
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	f002 021f 	and.w	r2, r2, #31
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	4013      	ands	r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0af      	beq.n	80010d2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	21f8      	movs	r1, #248	; 0xf8
 8001182:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800118a:	fa91 f1a1 	rbit	r1, r1
 800118e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001192:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001196:	fab1 f181 	clz	r1, r1
 800119a:	b2c9      	uxtb	r1, r1
 800119c:	408b      	lsls	r3, r1
 800119e:	4950      	ldr	r1, [pc, #320]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	600b      	str	r3, [r1, #0]
 80011a4:	e06a      	b.n	800127c <HAL_RCC_OscConfig+0x5ec>
 80011a6:	2301      	movs	r3, #1
 80011a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011b0:	fa93 f3a3 	rbit	r3, r3
 80011b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	461a      	mov	r2, r3
 80011ce:	2300      	movs	r3, #0
 80011d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fa4f 	bl	8000674 <HAL_GetTick>
 80011d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	e00a      	b.n	80011f2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fa4a 	bl	8000674 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d902      	bls.n	80011f2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f000 bc50 	b.w	8001a92 <HAL_RCC_OscConfig+0xe02>
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d102      	bne.n	8001222 <HAL_RCC_OscConfig+0x592>
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	e013      	b.n	800124a <HAL_RCC_OscConfig+0x5ba>
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800123a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_RCC_OscConfig+0x650>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	2202      	movs	r2, #2
 800124c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001250:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001254:	fa92 f2a2 	rbit	r2, r2
 8001258:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800125c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001260:	fab2 f282 	clz	r2, r2
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f042 0220 	orr.w	r2, r2, #32
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	f002 021f 	and.w	r2, r2, #31
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1af      	bne.n	80011dc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80da 	beq.w	8001440 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d069      	beq.n	800136a <HAL_RCC_OscConfig+0x6da>
 8001296:	2301      	movs	r3, #1
 8001298:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_OscConfig+0x654>)
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	461a      	mov	r2, r3
 80012bc:	2301      	movs	r3, #1
 80012be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff f9d8 	bl	8000674 <HAL_GetTick>
 80012c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c8:	e00e      	b.n	80012e8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff f9d3 	bl	8000674 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d906      	bls.n	80012e8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e3d9      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	10908120 	.word	0x10908120
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012fe:	2202      	movs	r2, #2
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	fa93 f2a3 	rbit	r2, r3
 800130c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001316:	2202      	movs	r2, #2
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	fa93 f2a3 	rbit	r2, r3
 8001324:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001328:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	4ba5      	ldr	r3, [pc, #660]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 800132c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001332:	2102      	movs	r1, #2
 8001334:	6019      	str	r1, [r3, #0]
 8001336:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fa93 f1a3 	rbit	r1, r3
 8001340:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001344:	6019      	str	r1, [r3, #0]
  return result;
 8001346:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	2101      	movs	r1, #1
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0b0      	beq.n	80012ca <HAL_RCC_OscConfig+0x63a>
 8001368:	e06a      	b.n	8001440 <HAL_RCC_OscConfig+0x7b0>
 800136a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001380:	601a      	str	r2, [r3, #0]
  return result;
 8001382:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001386:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <HAL_RCC_OscConfig+0x934>)
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	461a      	mov	r2, r3
 8001398:	2300      	movs	r3, #0
 800139a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff f96a 	bl	8000674 <HAL_GetTick>
 80013a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	e009      	b.n	80013ba <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff f965 	bl	8000674 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e36b      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
 80013ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013be:	2202      	movs	r2, #2
 80013c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	fa93 f2a3 	rbit	r2, r3
 80013cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013d6:	2202      	movs	r2, #2
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	fa93 f2a3 	rbit	r2, r3
 80013e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013ee:	2202      	movs	r2, #2
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fa93 f2a3 	rbit	r2, r3
 80013fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001400:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001406:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800140a:	2102      	movs	r1, #2
 800140c:	6019      	str	r1, [r3, #0]
 800140e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fa93 f1a3 	rbit	r1, r3
 8001418:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800141c:	6019      	str	r1, [r3, #0]
  return result;
 800141e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1b2      	bne.n	80013a6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8158 	beq.w	8001700 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a56      	ldr	r2, [pc, #344]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001488:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <HAL_RCC_OscConfig+0x938>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d11a      	bne.n	80014ca <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001494:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <HAL_RCC_OscConfig+0x938>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a4b      	ldr	r2, [pc, #300]	; (80015c8 <HAL_RCC_OscConfig+0x938>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a0:	f7ff f8e8 	bl	8000674 <HAL_GetTick>
 80014a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e009      	b.n	80014be <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff f8e3 	bl	8000674 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e2e9      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <HAL_RCC_OscConfig+0x938>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0ef      	beq.n	80014aa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x852>
 80014d4:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a39      	ldr	r2, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	e02f      	b.n	8001542 <HAL_RCC_OscConfig+0x8b2>
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x876>
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	e01d      	b.n	8001542 <HAL_RCC_OscConfig+0x8b2>
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x89a>
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	e00b      	b.n	8001542 <HAL_RCC_OscConfig+0x8b2>
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d06b      	beq.n	8001624 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff f892 	bl	8000674 <HAL_GetTick>
 8001550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff f88d 	bl	8000674 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e291      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
 800156e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800159c:	601a      	str	r2, [r3, #0]
  return result;
 800159e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d109      	bne.n	80015cc <HAL_RCC_OscConfig+0x93c>
 80015b8:	4b01      	ldr	r3, [pc, #4]	; (80015c0 <HAL_RCC_OscConfig+0x930>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	e014      	b.n	80015e8 <HAL_RCC_OscConfig+0x958>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	10908120 	.word	0x10908120
 80015c8:	40007000 	.word	0x40007000
 80015cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f2a3 	rbit	r2, r3
 80015de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	4bbb      	ldr	r3, [pc, #748]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015ec:	2102      	movs	r1, #2
 80015ee:	6011      	str	r1, [r2, #0]
 80015f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	fa92 f1a2 	rbit	r1, r2
 80015fa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015fe:	6011      	str	r1, [r2, #0]
  return result;
 8001600:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f002 021f 	and.w	r2, r2, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d099      	beq.n	8001556 <HAL_RCC_OscConfig+0x8c6>
 8001622:	e063      	b.n	80016ec <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff f826 	bl	8000674 <HAL_GetTick>
 8001628:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff f821 	bl	8000674 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e225      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
 8001646:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800164a:	2202      	movs	r2, #2
 800164c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001662:	2202      	movs	r2, #2
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f2a3 	rbit	r2, r3
 8001670:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001674:	601a      	str	r2, [r3, #0]
  return result;
 8001676:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800167a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d102      	bne.n	8001696 <HAL_RCC_OscConfig+0xa06>
 8001690:	4b90      	ldr	r3, [pc, #576]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	e00d      	b.n	80016b2 <HAL_RCC_OscConfig+0xa22>
 8001696:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016b6:	2102      	movs	r1, #2
 80016b8:	6011      	str	r1, [r2, #0]
 80016ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	fa92 f1a2 	rbit	r1, r2
 80016c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016c8:	6011      	str	r1, [r2, #0]
  return result;
 80016ca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	fab2 f282 	clz	r2, r2
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f002 021f 	and.w	r2, r2, #31
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1a0      	bne.n	800162e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	4a76      	ldr	r2, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 80016fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 81c2 	beq.w	8001a90 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	f000 819c 	beq.w	8001a52 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b02      	cmp	r3, #2
 8001722:	f040 8114 	bne.w	800194e <HAL_RCC_OscConfig+0xcbe>
 8001726:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800172a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fa93 f2a3 	rbit	r2, r3
 800173a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800173e:	601a      	str	r2, [r3, #0]
  return result;
 8001740:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001744:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001750:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	461a      	mov	r2, r3
 8001758:	2300      	movs	r3, #0
 800175a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7fe ff8a 	bl	8000674 <HAL_GetTick>
 8001760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7fe ff85 	bl	8000674 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e18b      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
 800177a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800177e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001792:	601a      	str	r2, [r3, #0]
  return result;
 8001794:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001798:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0xb24>
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e01b      	b.n	80017ec <HAL_RCC_OscConfig+0xb5c>
 80017b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017f4:	6011      	str	r1, [r2, #0]
 80017f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fa92 f1a2 	rbit	r1, r2
 8001800:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001804:	6011      	str	r1, [r2, #0]
  return result;
 8001806:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d19e      	bne.n	8001766 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	430b      	orrs	r3, r1
 800183e:	4925      	ldr	r1, [pc, #148]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001848:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800185c:	601a      	str	r2, [r3, #0]
  return result;
 800185e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001862:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800186e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	461a      	mov	r2, r3
 8001876:	2301      	movs	r3, #1
 8001878:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7fe fefb 	bl	8000674 <HAL_GetTick>
 800187e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7fe fef6 	bl	8000674 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0fc      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
 8001898:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800189c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b0:	601a      	str	r2, [r3, #0]
  return result;
 80018b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	fab3 f383 	clz	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_RCC_OscConfig+0xc48>
 80018cc:	4b01      	ldr	r3, [pc, #4]	; (80018d4 <HAL_RCC_OscConfig+0xc44>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e01e      	b.n	8001910 <HAL_RCC_OscConfig+0xc80>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_OscConfig+0xe0c>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001914:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001918:	6011      	str	r1, [r2, #0]
 800191a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fa92 f1a2 	rbit	r1, r2
 8001924:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001928:	6011      	str	r1, [r2, #0]
  return result;
 800192a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	fab2 f282 	clz	r2, r2
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	f042 0220 	orr.w	r2, r2, #32
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f002 021f 	and.w	r2, r2, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d09b      	beq.n	8001884 <HAL_RCC_OscConfig+0xbf4>
 800194c:	e0a0      	b.n	8001a90 <HAL_RCC_OscConfig+0xe00>
 800194e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001952:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	601a      	str	r2, [r3, #0]
  return result;
 8001968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	461a      	mov	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7fe fe76 	bl	8000674 <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e009      	b.n	80019a2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7fe fe71 	bl	8000674 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e077      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	601a      	str	r2, [r3, #0]
  return result;
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_OscConfig+0xd4c>
 80019d6:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_RCC_OscConfig+0xe0c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	e01b      	b.n	8001a14 <HAL_RCC_OscConfig+0xd84>
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_OscConfig+0xe0c>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f107 0210 	add.w	r2, r7, #16
 8001a18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a1c:	6011      	str	r1, [r2, #0]
 8001a1e:	f107 0210 	add.w	r2, r7, #16
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	fa92 f1a2 	rbit	r1, r2
 8001a28:	f107 020c 	add.w	r2, r7, #12
 8001a2c:	6011      	str	r1, [r2, #0]
  return result;
 8001a2e:	f107 020c 	add.w	r2, r7, #12
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d19e      	bne.n	800198e <HAL_RCC_OscConfig+0xcfe>
 8001a50:	e01e      	b.n	8001a90 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e018      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_RCC_OscConfig+0xe0c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a68:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d108      	bne.n	8001a8c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b09e      	sub	sp, #120	; 0x78
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e162      	b.n	8001d7e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b90      	ldr	r3, [pc, #576]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b8d      	ldr	r3, [pc, #564]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	498b      	ldr	r1, [pc, #556]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b89      	ldr	r3, [pc, #548]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e14a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	497f      	ldr	r1, [pc, #508]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80dc 	beq.w	8001ccc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d13c      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xf6>
 8001b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xa6>
 8001b40:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e00f      	b.n	8001b66 <HAL_RCC_ClockConfig+0xc6>
 8001b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	667b      	str	r3, [r7, #100]	; 0x64
 8001b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b58:	663b      	str	r3, [r7, #96]	; 0x60
 8001b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b6e:	fa92 f2a2 	rbit	r2, r2
 8001b72:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b76:	fab2 f282 	clz	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f042 0220 	orr.w	r2, r2, #32
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f002 021f 	and.w	r2, r2, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d17b      	bne.n	8001c8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0f3      	b.n	8001d7e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d13c      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x178>
 8001b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x128>
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e00f      	b.n	8001be8 <HAL_RCC_ClockConfig+0x148>
 8001bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bcc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8001bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bda:	643b      	str	r3, [r7, #64]	; 0x40
 8001bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be4:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bec:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bf0:	fa92 f2a2 	rbit	r2, r2
 8001bf4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d13a      	bne.n	8001c8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b2      	b.n	8001d7e <HAL_RCC_ClockConfig+0x2de>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x1a0>
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e00d      	b.n	8001c5c <HAL_RCC_ClockConfig+0x1bc>
 8001c40:	2302      	movs	r3, #2
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	61ba      	str	r2, [r7, #24]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	fa92 f2a2 	rbit	r2, r2
 8001c66:	617a      	str	r2, [r7, #20]
  return result;
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f002 021f 	and.w	r2, r2, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e079      	b.n	8001d7e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	491a      	ldr	r1, [pc, #104]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7fe fcea 	bl	8000674 <HAL_GetTick>
 8001ca0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7fe fce6 	bl	8000674 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e061      	b.n	8001d7e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_RCC_ClockConfig+0x260>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d214      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0207 	bic.w	r2, r3, #7
 8001ce2:	4906      	ldr	r1, [pc, #24]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_RCC_ClockConfig+0x25c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e040      	b.n	8001d7e <HAL_RCC_ClockConfig+0x2de>
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_ClockConfig+0x2e8>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	491a      	ldr	r1, [pc, #104]	; (8001d88 <HAL_RCC_ClockConfig+0x2e8>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_RCC_ClockConfig+0x2e8>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4912      	ldr	r1, [pc, #72]	; (8001d88 <HAL_RCC_ClockConfig+0x2e8>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d42:	f000 f829 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001d46:	4601      	mov	r1, r0
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_ClockConfig+0x2e8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d50:	22f0      	movs	r2, #240	; 0xf0
 8001d52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	fa92 f2a2 	rbit	r2, r2
 8001d5a:	60fa      	str	r2, [r7, #12]
  return result;
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	fab2 f282 	clz	r2, r2
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	40d3      	lsrs	r3, r2
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x2ec>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d6e:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <HAL_RCC_ClockConfig+0x2f0>)
 8001d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_ClockConfig+0x2f4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fc38 	bl	80005ec <HAL_InitTick>
  
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3778      	adds	r7, #120	; 0x78
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08003048 	.word	0x08003048
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x30>
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x36>
 8001dc6:	e03c      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dca:	623b      	str	r3, [r7, #32]
      break;
 8001dcc:	e03c      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dd4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dd8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	fa92 f2a2 	rbit	r2, r2
 8001de0:	607a      	str	r2, [r7, #4]
  return result;
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	40d3      	lsrs	r3, r2
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	fa92 f2a2 	rbit	r2, r2
 8001e04:	60fa      	str	r2, [r7, #12]
  return result;
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	40d3      	lsrs	r3, r2
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	e004      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	623b      	str	r3, [r7, #32]
      break;
 8001e40:	e002      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e44:	623b      	str	r3, [r7, #32]
      break;
 8001e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e48:	6a3b      	ldr	r3, [r7, #32]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	372c      	adds	r7, #44	; 0x2c
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	007a1200 	.word	0x007a1200
 8001e60:	08003060 	.word	0x08003060
 8001e64:	08003070 	.word	0x08003070
 8001e68:	003d0900 	.word	0x003d0900

08001e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e8a:	f7ff ffef 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e8e:	4601      	mov	r1, r0
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e98:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	fa92 f2a2 	rbit	r2, r2
 8001ea4:	603a      	str	r2, [r7, #0]
  return result;
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	40d3      	lsrs	r3, r2
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08003058 	.word	0x08003058

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ece:	f7ff ffcd 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001edc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ee0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	fa92 f2a2 	rbit	r2, r2
 8001ee8:	603a      	str	r2, [r7, #0]
  return result;
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	fab2 f282 	clz	r2, r2
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	40d3      	lsrs	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003058 	.word	0x08003058

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b092      	sub	sp, #72	; 0x48
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80d4 	beq.w	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f30:	4b4e      	ldr	r3, [pc, #312]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10e      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	61d3      	str	r3, [r2, #28]
 8001f48:	4b48      	ldr	r3, [pc, #288]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d118      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a41      	ldr	r2, [pc, #260]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7fe fb7f 	bl	8000674 <HAL_GetTick>
 8001f76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7fe fb7b 	bl	8000674 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e169      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8084 	beq.w	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d07c      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	461a      	mov	r2, r3
 8002006:	2300      	movs	r3, #0
 8002008:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800200a:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d04b      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe fb2b 	bl	8000674 <HAL_GetTick>
 800201e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe fb27 	bl	8000674 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e113      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002038:	2302      	movs	r3, #2
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
 8002044:	2302      	movs	r3, #2
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	61fb      	str	r3, [r7, #28]
  return result;
 8002050:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d108      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002066:	4b01      	ldr	r3, [pc, #4]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	e00d      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	10908100 	.word	0x10908100
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	4b78      	ldr	r3, [pc, #480]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2202      	movs	r2, #2
 800208a:	613a      	str	r2, [r7, #16]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	60fa      	str	r2, [r7, #12]
  return result;
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0b7      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	496a      	ldr	r1, [pc, #424]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e4:	4b60      	ldr	r3, [pc, #384]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f023 0203 	bic.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	495d      	ldr	r1, [pc, #372]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002102:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4956      	ldr	r1, [pc, #344]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002120:	4b51      	ldr	r3, [pc, #324]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	494e      	ldr	r1, [pc, #312]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f023 0210 	bic.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4947      	ldr	r1, [pc, #284]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800214c:	4313      	orrs	r3, r2
 800214e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800215c:	4b42      	ldr	r3, [pc, #264]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	493f      	ldr	r1, [pc, #252]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f023 0220 	bic.w	r2, r3, #32
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4938      	ldr	r1, [pc, #224]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002198:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4930      	ldr	r1, [pc, #192]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4929      	ldr	r1, [pc, #164]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	4921      	ldr	r1, [pc, #132]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	491a      	ldr	r1, [pc, #104]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	4912      	ldr	r1, [pc, #72]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	490b      	ldr	r1, [pc, #44]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002258:	4903      	ldr	r1, [pc, #12]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3748      	adds	r7, #72	; 0x48
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e040      	b.n	8002300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe f8b2 	bl	80003f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fae0 	bl	8002870 <UART_SetConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e022      	b.n	8002300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fca6 	bl	8002c14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fd2d 	bl	8002d58 <UART_CheckIdleState>
 80022fe:	4603      	mov	r3, r0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800231c:	2b20      	cmp	r3, #32
 800231e:	f040 8082 	bne.w	8002426 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_UART_Transmit+0x26>
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07a      	b.n	8002428 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_UART_Transmit+0x38>
 800233c:	2302      	movs	r3, #2
 800233e:	e073      	b.n	8002428 <HAL_UART_Transmit+0x120>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2221      	movs	r2, #33	; 0x21
 8002354:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002356:	f7fe f98d 	bl	8000674 <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002374:	d108      	bne.n	8002388 <HAL_UART_Transmit+0x80>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d104      	bne.n	8002388 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	e003      	b.n	8002390 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002398:	e02d      	b.n	80023f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fd20 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e039      	b.n	8002428 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10b      	bne.n	80023d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c6:	b292      	uxth	r2, r2
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3302      	adds	r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	e008      	b.n	80023e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b292      	uxth	r2, r2
 80023dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1cb      	bne.n	800239a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	2140      	movs	r1, #64	; 0x40
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fcec 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e005      	b.n	8002428 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
  }
}
 8002428:	4618      	mov	r0, r3
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f640 030f 	movw	r3, #2063	; 0x80f
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d113      	bne.n	8002488 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00e      	beq.n	8002488 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 81cd 	beq.w	8002818 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
      }
      return;
 8002486:	e1c7      	b.n	8002818 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80e3 	beq.w	8002656 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4ba5      	ldr	r3, [pc, #660]	; (8002734 <HAL_UART_IRQHandler+0x304>)
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80d8 	beq.w	8002656 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <HAL_UART_IRQHandler+0xa2>
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <HAL_UART_IRQHandler+0xce>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2202      	movs	r2, #2
 80024ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d010      	beq.n	800252a <HAL_UART_IRQHandler+0xfa>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2204      	movs	r2, #4
 8002518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002520:	f043 0202 	orr.w	r2, r3, #2
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2208      	movs	r2, #8
 800254e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002566:	2b00      	cmp	r3, #0
 8002568:	d011      	beq.n	800258e <HAL_UART_IRQHandler+0x15e>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800257c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8141 	beq.w	800281c <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00c      	beq.n	80025be <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d004      	beq.n	80025de <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d031      	beq.n	8002642 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fc7f 	bl	8002ee2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d123      	bne.n	800263a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002600:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	2b00      	cmp	r3, #0
 8002608:	d013      	beq.n	8002632 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_UART_IRQHandler+0x308>)
 8002610:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe f982 	bl	8000920 <HAL_DMA_Abort_IT>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d017      	beq.n	8002652 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800262c:	4610      	mov	r0, r2
 800262e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	e00f      	b.n	8002652 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f906 	bl	8002844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002638:	e00b      	b.n	8002652 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f902 	bl	8002844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e007      	b.n	8002652 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8fe 	bl	8002844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002650:	e0e4      	b.n	800281c <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	bf00      	nop
    return;
 8002654:	e0e2      	b.n	800281c <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	2b01      	cmp	r3, #1
 800265c:	f040 80a7 	bne.w	80027ae <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80a1 	beq.w	80027ae <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 809b 	beq.w	80027ae <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d156      	bne.n	800273c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002698:	893b      	ldrh	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80c0 	beq.w	8002820 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80026a6:	893a      	ldrh	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f080 80b9 	bcs.w	8002820 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	893a      	ldrh	r2, [r7, #8]
 80026b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d02a      	beq.n	8002716 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ee:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe f8cc 	bl	80008ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002722:	b29b      	uxth	r3, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	b29b      	uxth	r3, r3
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f894 	bl	8002858 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002730:	e076      	b.n	8002820 <HAL_UART_IRQHandler+0x3f0>
 8002732:	bf00      	nop
 8002734:	04000120 	.word	0x04000120
 8002738:	08002f41 	.word	0x08002f41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002748:	b29b      	uxth	r3, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d064      	beq.n	8002824 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 800275a:	897b      	ldrh	r3, [r7, #10]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d061      	beq.n	8002824 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800276e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0210 	bic.w	r2, r2, #16
 80027a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f856 	bl	8002858 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80027ac:	e03a      	b.n	8002824 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <HAL_UART_IRQHandler+0x3a4>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fbe6 	bl	8002f9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027d2:	e02a      	b.n	800282a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01b      	beq.n	8002828 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
    }
    return;
 80027f8:	e016      	b.n	8002828 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <HAL_UART_IRQHandler+0x3fa>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fbac 	bl	8002f6c <UART_EndTransmit_IT>
    return;
 8002814:	bf00      	nop
 8002816:	e008      	b.n	800282a <HAL_UART_IRQHandler+0x3fa>
      return;
 8002818:	bf00      	nop
 800281a:	e006      	b.n	800282a <HAL_UART_IRQHandler+0x3fa>
    return;
 800281c:	bf00      	nop
 800281e:	e004      	b.n	800282a <HAL_UART_IRQHandler+0x3fa>
      return;
 8002820:	bf00      	nop
 8002822:	e002      	b.n	800282a <HAL_UART_IRQHandler+0x3fa>
      return;
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <HAL_UART_IRQHandler+0x3fa>
    return;
 8002828:	bf00      	nop
  }

}
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800289e:	f023 030c 	bic.w	r3, r3, #12
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4aad      	ldr	r2, [pc, #692]	; (8002ba0 <UART_SetConfig+0x330>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d121      	bne.n	8002934 <UART_SetConfig+0xc4>
 80028f0:	4bac      	ldr	r3, [pc, #688]	; (8002ba4 <UART_SetConfig+0x334>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d817      	bhi.n	800292c <UART_SetConfig+0xbc>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <UART_SetConfig+0x94>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002915 	.word	0x08002915
 8002908:	08002921 	.word	0x08002921
 800290c:	08002927 	.word	0x08002927
 8002910:	0800291b 	.word	0x0800291b
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e0b2      	b.n	8002a80 <UART_SetConfig+0x210>
 800291a:	2302      	movs	r3, #2
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e0af      	b.n	8002a80 <UART_SetConfig+0x210>
 8002920:	2304      	movs	r3, #4
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e0ac      	b.n	8002a80 <UART_SetConfig+0x210>
 8002926:	2308      	movs	r3, #8
 8002928:	77fb      	strb	r3, [r7, #31]
 800292a:	e0a9      	b.n	8002a80 <UART_SetConfig+0x210>
 800292c:	2310      	movs	r3, #16
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	bf00      	nop
 8002932:	e0a5      	b.n	8002a80 <UART_SetConfig+0x210>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a9b      	ldr	r2, [pc, #620]	; (8002ba8 <UART_SetConfig+0x338>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d123      	bne.n	8002986 <UART_SetConfig+0x116>
 800293e:	4b99      	ldr	r3, [pc, #612]	; (8002ba4 <UART_SetConfig+0x334>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294a:	d012      	beq.n	8002972 <UART_SetConfig+0x102>
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d802      	bhi.n	8002958 <UART_SetConfig+0xe8>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <UART_SetConfig+0xf6>
 8002956:	e012      	b.n	800297e <UART_SetConfig+0x10e>
 8002958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295c:	d00c      	beq.n	8002978 <UART_SetConfig+0x108>
 800295e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002962:	d003      	beq.n	800296c <UART_SetConfig+0xfc>
 8002964:	e00b      	b.n	800297e <UART_SetConfig+0x10e>
 8002966:	2300      	movs	r3, #0
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e089      	b.n	8002a80 <UART_SetConfig+0x210>
 800296c:	2302      	movs	r3, #2
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e086      	b.n	8002a80 <UART_SetConfig+0x210>
 8002972:	2304      	movs	r3, #4
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e083      	b.n	8002a80 <UART_SetConfig+0x210>
 8002978:	2308      	movs	r3, #8
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e080      	b.n	8002a80 <UART_SetConfig+0x210>
 800297e:	2310      	movs	r3, #16
 8002980:	77fb      	strb	r3, [r7, #31]
 8002982:	bf00      	nop
 8002984:	e07c      	b.n	8002a80 <UART_SetConfig+0x210>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a88      	ldr	r2, [pc, #544]	; (8002bac <UART_SetConfig+0x33c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d123      	bne.n	80029d8 <UART_SetConfig+0x168>
 8002990:	4b84      	ldr	r3, [pc, #528]	; (8002ba4 <UART_SetConfig+0x334>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800299c:	d012      	beq.n	80029c4 <UART_SetConfig+0x154>
 800299e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029a2:	d802      	bhi.n	80029aa <UART_SetConfig+0x13a>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <UART_SetConfig+0x148>
 80029a8:	e012      	b.n	80029d0 <UART_SetConfig+0x160>
 80029aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029ae:	d00c      	beq.n	80029ca <UART_SetConfig+0x15a>
 80029b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029b4:	d003      	beq.n	80029be <UART_SetConfig+0x14e>
 80029b6:	e00b      	b.n	80029d0 <UART_SetConfig+0x160>
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e060      	b.n	8002a80 <UART_SetConfig+0x210>
 80029be:	2302      	movs	r3, #2
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e05d      	b.n	8002a80 <UART_SetConfig+0x210>
 80029c4:	2304      	movs	r3, #4
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e05a      	b.n	8002a80 <UART_SetConfig+0x210>
 80029ca:	2308      	movs	r3, #8
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e057      	b.n	8002a80 <UART_SetConfig+0x210>
 80029d0:	2310      	movs	r3, #16
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	bf00      	nop
 80029d6:	e053      	b.n	8002a80 <UART_SetConfig+0x210>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a74      	ldr	r2, [pc, #464]	; (8002bb0 <UART_SetConfig+0x340>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d123      	bne.n	8002a2a <UART_SetConfig+0x1ba>
 80029e2:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <UART_SetConfig+0x334>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ee:	d012      	beq.n	8002a16 <UART_SetConfig+0x1a6>
 80029f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f4:	d802      	bhi.n	80029fc <UART_SetConfig+0x18c>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <UART_SetConfig+0x19a>
 80029fa:	e012      	b.n	8002a22 <UART_SetConfig+0x1b2>
 80029fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a00:	d00c      	beq.n	8002a1c <UART_SetConfig+0x1ac>
 8002a02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a06:	d003      	beq.n	8002a10 <UART_SetConfig+0x1a0>
 8002a08:	e00b      	b.n	8002a22 <UART_SetConfig+0x1b2>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	77fb      	strb	r3, [r7, #31]
 8002a0e:	e037      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a10:	2302      	movs	r3, #2
 8002a12:	77fb      	strb	r3, [r7, #31]
 8002a14:	e034      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a16:	2304      	movs	r3, #4
 8002a18:	77fb      	strb	r3, [r7, #31]
 8002a1a:	e031      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	77fb      	strb	r3, [r7, #31]
 8002a20:	e02e      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a22:	2310      	movs	r3, #16
 8002a24:	77fb      	strb	r3, [r7, #31]
 8002a26:	bf00      	nop
 8002a28:	e02a      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a61      	ldr	r2, [pc, #388]	; (8002bb4 <UART_SetConfig+0x344>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d123      	bne.n	8002a7c <UART_SetConfig+0x20c>
 8002a34:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <UART_SetConfig+0x334>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a40:	d012      	beq.n	8002a68 <UART_SetConfig+0x1f8>
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d802      	bhi.n	8002a4e <UART_SetConfig+0x1de>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <UART_SetConfig+0x1ec>
 8002a4c:	e012      	b.n	8002a74 <UART_SetConfig+0x204>
 8002a4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a52:	d00c      	beq.n	8002a6e <UART_SetConfig+0x1fe>
 8002a54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a58:	d003      	beq.n	8002a62 <UART_SetConfig+0x1f2>
 8002a5a:	e00b      	b.n	8002a74 <UART_SetConfig+0x204>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	77fb      	strb	r3, [r7, #31]
 8002a60:	e00e      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a62:	2302      	movs	r3, #2
 8002a64:	77fb      	strb	r3, [r7, #31]
 8002a66:	e00b      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e008      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a6e:	2308      	movs	r3, #8
 8002a70:	77fb      	strb	r3, [r7, #31]
 8002a72:	e005      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a74:	2310      	movs	r3, #16
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	bf00      	nop
 8002a7a:	e001      	b.n	8002a80 <UART_SetConfig+0x210>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a88:	d15d      	bne.n	8002b46 <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d828      	bhi.n	8002ae2 <UART_SetConfig+0x272>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <UART_SetConfig+0x228>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002ac5 	.word	0x08002ac5
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002ae3 	.word	0x08002ae3
 8002aa8:	08002ad3 	.word	0x08002ad3
 8002aac:	08002ae3 	.word	0x08002ae3
 8002ab0:	08002ae3 	.word	0x08002ae3
 8002ab4:	08002ae3 	.word	0x08002ae3
 8002ab8:	08002adb 	.word	0x08002adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002abc:	f7ff f9e2 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002ac0:	61b8      	str	r0, [r7, #24]
        break;
 8002ac2:	e013      	b.n	8002aec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ac4:	f7ff fa00 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8002ac8:	61b8      	str	r0, [r7, #24]
        break;
 8002aca:	e00f      	b.n	8002aec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <UART_SetConfig+0x348>)
 8002ace:	61bb      	str	r3, [r7, #24]
        break;
 8002ad0:	e00c      	b.n	8002aec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad2:	f7ff f961 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8002ad6:	61b8      	str	r0, [r7, #24]
        break;
 8002ad8:	e008      	b.n	8002aec <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ade:	61bb      	str	r3, [r7, #24]
        break;
 8002ae0:	e004      	b.n	8002aec <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8002aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8085 	beq.w	8002bfe <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	005a      	lsls	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	d916      	bls.n	8002b40 <UART_SetConfig+0x2d0>
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	d212      	bcs.n	8002b40 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f023 030f 	bic.w	r3, r3, #15
 8002b22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	89fb      	ldrh	r3, [r7, #14]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	89fa      	ldrh	r2, [r7, #14]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	e05e      	b.n	8002bfe <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	77bb      	strb	r3, [r7, #30]
 8002b44:	e05b      	b.n	8002bfe <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d837      	bhi.n	8002bbc <UART_SetConfig+0x34c>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <UART_SetConfig+0x2e4>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b79 	.word	0x08002b79
 8002b58:	08002b81 	.word	0x08002b81
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002bbd 	.word	0x08002bbd
 8002b64:	08002b8f 	.word	0x08002b8f
 8002b68:	08002bbd 	.word	0x08002bbd
 8002b6c:	08002bbd 	.word	0x08002bbd
 8002b70:	08002bbd 	.word	0x08002bbd
 8002b74:	08002b97 	.word	0x08002b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b78:	f7ff f984 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002b7c:	61b8      	str	r0, [r7, #24]
        break;
 8002b7e:	e022      	b.n	8002bc6 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b80:	f7ff f9a2 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8002b84:	61b8      	str	r0, [r7, #24]
        break;
 8002b86:	e01e      	b.n	8002bc6 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <UART_SetConfig+0x348>)
 8002b8a:	61bb      	str	r3, [r7, #24]
        break;
 8002b8c:	e01b      	b.n	8002bc6 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8e:	f7ff f903 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8002b92:	61b8      	str	r0, [r7, #24]
        break;
 8002b94:	e017      	b.n	8002bc6 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9a:	61bb      	str	r3, [r7, #24]
        break;
 8002b9c:	e013      	b.n	8002bc6 <UART_SetConfig+0x356>
 8002b9e:	bf00      	nop
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40004800 	.word	0x40004800
 8002bb0:	40004c00 	.word	0x40004c00
 8002bb4:	40005000 	.word	0x40005000
 8002bb8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	77bb      	strb	r3, [r7, #30]
        break;
 8002bc4:	bf00      	nop
    }

    if (pclk != 0U)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d018      	beq.n	8002bfe <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	085a      	lsrs	r2, r3, #1
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	441a      	add	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	2b0f      	cmp	r3, #15
 8002be6:	d908      	bls.n	8002bfa <UART_SetConfig+0x38a>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bee:	d204      	bcs.n	8002bfa <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	e001      	b.n	8002bfe <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c0a:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01a      	beq.n	8002d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d12:	d10a      	bne.n	8002d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d68:	f7fd fc84 	bl	8000674 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d10e      	bne.n	8002d9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f82d 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e023      	b.n	8002de2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d10e      	bne.n	8002dc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f817 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e00d      	b.n	8002de2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfa:	e05e      	b.n	8002eba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d05a      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fd fc36 	bl	8000674 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11b      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e043      	b.n	8002eda <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02c      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6e:	d124      	bne.n	8002eba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e00f      	b.n	8002eda <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d091      	beq.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ef8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0210 	bic.w	r2, r2, #16
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff fc70 	bl	8002844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f82:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fc4d 	bl	8002830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <__libc_init_array>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	4e0d      	ldr	r6, [pc, #52]	; (8002fec <__libc_init_array+0x38>)
 8002fb8:	4c0d      	ldr	r4, [pc, #52]	; (8002ff0 <__libc_init_array+0x3c>)
 8002fba:	1ba4      	subs	r4, r4, r6
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	2500      	movs	r5, #0
 8002fc0:	42a5      	cmp	r5, r4
 8002fc2:	d109      	bne.n	8002fd8 <__libc_init_array+0x24>
 8002fc4:	4e0b      	ldr	r6, [pc, #44]	; (8002ff4 <__libc_init_array+0x40>)
 8002fc6:	4c0c      	ldr	r4, [pc, #48]	; (8002ff8 <__libc_init_array+0x44>)
 8002fc8:	f000 f820 	bl	800300c <_init>
 8002fcc:	1ba4      	subs	r4, r4, r6
 8002fce:	10a4      	asrs	r4, r4, #2
 8002fd0:	2500      	movs	r5, #0
 8002fd2:	42a5      	cmp	r5, r4
 8002fd4:	d105      	bne.n	8002fe2 <__libc_init_array+0x2e>
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fdc:	4798      	blx	r3
 8002fde:	3501      	adds	r5, #1
 8002fe0:	e7ee      	b.n	8002fc0 <__libc_init_array+0xc>
 8002fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe6:	4798      	blx	r3
 8002fe8:	3501      	adds	r5, #1
 8002fea:	e7f2      	b.n	8002fd2 <__libc_init_array+0x1e>
 8002fec:	08003080 	.word	0x08003080
 8002ff0:	08003080 	.word	0x08003080
 8002ff4:	08003080 	.word	0x08003080
 8002ff8:	08003084 	.word	0x08003084

08002ffc <memset>:
 8002ffc:	4402      	add	r2, r0
 8002ffe:	4603      	mov	r3, r0
 8003000:	4293      	cmp	r3, r2
 8003002:	d100      	bne.n	8003006 <memset+0xa>
 8003004:	4770      	bx	lr
 8003006:	f803 1b01 	strb.w	r1, [r3], #1
 800300a:	e7f9      	b.n	8003000 <memset+0x4>

0800300c <_init>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr

08003018 <_fini>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr
